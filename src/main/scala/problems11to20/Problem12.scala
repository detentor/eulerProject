package problems11to20

import numbers._
import scala.collection.mutable.ArrayBuffer

//The sequence of triangle numbers is generated by adding the natural numbers. 
//So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
//
//1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
//Let us list the factors of the first seven triangle numbers:
// 1: 1
// 3: 1,3
// 6: 1,2,3,6
//10: 1,2,5,10
//15: 1,3,5,15
//21: 1,3,7,21
//28: 1,2,4,7,14,28
//
//We can see that 28 is the first triangle number to have over five divisors.
//
//What is the value of the first triangle number to have over five hundred divisors?
object Problem12
{
	def main(args: Array[String]) 
	{
		var counter = 1L
		var curTriangle = 1L
		var divisorsSize = getDivisorsSt(curTriangle).size
		
		while (divisorsSize < 500)
		{
			counter += 1
			curTriangle += counter
			
			//Otimização: número é múltiplo de 2, 3, 4, 5, 6, 7, 8, 9
			if (curTriangle % 13860 == 0)
			{
				divisorsSize = getDivisorsSt(curTriangle).size
			}
			
			if (counter % 100 == 0)
			{
				println("CurTriangle : " + curTriangle)
				println("size : " + divisorsSize)
			}
		}
		println("Encontrou : " + curTriangle)		
	}
	
	def triangleNum(x : Long) = (1L to x).sum
	
	def triangleStream : Stream[Long] = 
	{
		def triangleStream(x : Long, prevSum : Long) : Stream[Long] = { println(x); (x + prevSum) #:: triangleStream(x + 1, x + prevSum) }
		triangleStream(1, 0)
	}
	
	def getDivisorsSt(x : Long) : ArrayBuffer[Long] = 
	{
		var arrayRet = new ArrayBuffer[Long]
		
		var k = 1L
		var stop = x / 2
		
		while( k <= stop)
		{
			if (x % k == 0) arrayRet += k
			k += 1
		}
//		(1L to x / 2).foreach( k => if (x % k == 0) arrayRet += k )
		
		arrayRet += x
		arrayRet
	}

	
	
}